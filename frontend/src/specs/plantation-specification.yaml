openapi: 3.0.3
info:
  title: Plantation specification
  description: Plantation specification
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /plantation/create-plantation:
    description: |
      Endpoint for creating plantations
    post:
      tags:
        - "Plantation"
      operationId: createPlantation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Plantation"
      responses:
        "200":
          description: Ok. Successful response will return OK status.
  /plantation/edit-plantation:
    description: |
      Endpoint for editing existing plantations
    post:
      tags:
        - "Plantation"
      operationId: editPlantation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Plantation"
      responses:
        "200":
          description: Ok. Successful response will return OK status.
  /plantation/delete-plantation:
    description: |
      Endpoint for deleting existing plantations by given id
    post:
      tags:
        - "Plantation"
      operationId: deletePlantation
      parameters:
        - name: id
          in: query
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ok. Successful response will return OK status.
  /plantation/get-plantations:
    description: |
      Endpoint for getting list of all plantations
    get:
      tags:
        - "Plantation"
      operationId: getPlantations
      responses:
        "200":
          description: Ok. Successful response will return OK status and list of PlantationDto objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plantation"
  /plantation/get-plantations-by-user:
    description: |
      Endpoint for getting list of plantations by given user id.
    post:
      tags:
        - "Plantation"
      operationId: getPlantationsByUser
      parameters:
        - name: userId
          in: query
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ok. Successful response will return OK status and list of PlantationDto objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plantation"
  /plantation/get-plantation-by-id:
    description: |
      Endpoint for getting single plantation object specified by given id.
    post:
      tags:
        - "Plantation"
      operationId: getPlantationById
      parameters:
        - name: id
          in: query
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ok. Successful response will return OK status and PlantationDto object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plantation"
  /plantation/add-area:
    description: |
      Endpoint for adding areas (as sectors) into plantations.
    post:
      tags:
        - "Plantation"
      operationId: addArea
      parameters:
        - name: plantationId
          in: query
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Area"
      responses:
        "200":
          description: Ok. Successful response will return OK status.
  /plantation/edit-area:
    description: |
      Endpoint for editing existing area
    post:
      tags:
        - "Plantation"
      operationId: editArea
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Area"
      responses:
        "200":
          description: Ok. Successful response will return OK status.
  /plantation/delete-area:
    description: |
      Endpoint for deleting area by given id.
    post:
      tags:
        - "Plantation"
      operationId: deleteArea
      parameters:
        - name: areaId
          in: query
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK. Successful response will return OK status.
  /plantation/get-areas:
    description: |
      Endpoint for getting list of areas.
    get:
      tags:
        - "Plantation"
      operationId: getAreas
      responses:
        "200":
          description: Ok. Successful response will return OK status and list of AreaDto objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Area"
  /plantation/get-areas-by-plantation:
    description: |
      Endpoint for getting list of areas from specific plantations.
    post:
      tags:
        - "Plantation"
      operationId: getAreasByPlantation
      parameters:
        - name: plantationId
          in: query
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ok. Successful response will return OK status and list of AreaDto objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Area"
  /plantation/get-area-by-id:
    description: |
      Endpoint for getting single one area by id.
    post:
      tags:
        - "Plantation"
      operationId: getAreaById
      parameters:
        - name: areaId
          in: query
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ok. Successful response will return OK status and AreaDto object specified by given id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Area"
  /plantation/add-employe:
    description: |
      Endpoint for adding employees to plantation.
    post:
      tags:
        - "Plantation"
      operationId: addEmployee
      parameters:
        - name: plantationId
          in: query
          required: true
          allowEmptyValue: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ok. Successful response will return OK status.
  /plantation/delete-employe:
    description: |
      Endpoint for deleting employees to plantation.
    post:
      tags:
        - "Plantation"
      operationId: deleteEmployee
      parameters:
        - name: plantationId
          in: query
          required: true
          allowEmptyValue: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ok. Successful response will return OK status.
  /plantation/get-employees:
    description: |
      Endpoint for getting list of employees from specific plantation.
    post:
      tags:
        - "Plantation"
      operationId: getEmployees
      parameters:
        - name: plantationId
          in: query
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ok. Successful response will return OK status and list of UserDto objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "authentication-specification.yaml#/components/schemas/User"
  /plantation/get-user-worked-in-plantations:
    description: |
      Endpoint for getting list of plantations in which is user working on
    post:
      tags:
        - "Plantation"
      operationId: getUserWorkedInPlantations
      responses:
        "200":
          description: Ok. Successful response will return OK status and list of PlantationDto objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plantation"
components:
  schemas:
    Plantation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        nip:
          type: string
        regon:
          type: string
        city:
          type: string
        street:
          type: string
        houseNumber:
          type: integer
        flatNumber:
          type: integer
        postCode:
          type: string
        area:
          $ref: "#/components/schemas/Area"
        sectors:
          type: array
          items:
            $ref: "#/components/schemas/Area"
        ownerId:
          type: integer
          format: int64
        employeeIds:
          type: array
          items:
            type: integer
            format: int64
    Area:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        polygonColor:
          type: string
        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/Coordinate"
        isMainArea:
          type: boolean
    Coordinate:
      type: object
      properties:
        id:
          type: integer
          format: int64
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
